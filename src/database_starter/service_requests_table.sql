-- Table: public.service_request

-- DROP TABLE IF EXISTS public.service_request;

CREATE TABLE IF NOT EXISTS public.service_request
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    user_id uuid NOT NULL,
    email text COLLATE pg_catalog."default",
    short_desc text COLLATE pg_catalog."default",
    long_desc text COLLATE pg_catalog."default",
    accept_reject boolean DEFAULT false,
    created_at timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
    name text COLLATE pg_catalog."default",
    CONSTRAINT service_request_pkey PRIMARY KEY (id),
    CONSTRAINT service_request_user_id_fkey FOREIGN KEY (user_id)
        REFERENCES auth.users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.service_request
    OWNER to supabase_admin;

ALTER TABLE IF EXISTS public.service_request
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public.service_request TO anon;

GRANT ALL ON TABLE public.service_request TO postgres;

GRANT ALL ON TABLE public.service_request TO supabase_admin;

GRANT ALL ON TABLE public.service_request TO authenticated;

GRANT ALL ON TABLE public.service_request TO service_role;


-- manage policy "users can only delete their own requests"
drop policy if exists "users can only delete their own requests" on public.service_request;

create policy "users can only delete their own requests" on public.service_request
    for delete using (auth.uid() in (select user_id from public.service_request where user_id = user_id));

-- manage policy "only admins can complete requests"
drop policy if exists "only admins can complete requests" on public.service_request;

create policy "only admins can complete requests" on public.service_request
    for update using (auth.uid() = user);

-- manage policy "only users can create their own requests"
drop policy if exists "only users can create their own requests" on public.service_request;

create policy "only users can create their own requests" on public.service_request
    for INSERT with check (auth.uid() = user_id );

-- allow user to visualize requests
drop policy if exists "all users can see the requests" on public.service_request;

create policy "all users can see the requests" on public.service_request
    for select using (true);

begin;
  -- remove the supabase_realtime publication
  drop publication if exists supabase_realtime;

  -- re-create the supabase_realtime publication with no tables
  create publication supabase_realtime;
commit;

-- add a table to the publication
alter publication supabase_realtime add table public.service_request;

alter table public.service_request replica identity full;